#!/usr/bin/env python

"""
$Id$
$URL$

Copyright (C) 2004 Matteo Merli <matteo.merli@gmail.com>

This code is licenced under the GPL. See LICENSE file.

"""

from pixies import parser, xslt, version
from pixies.template import DocumentTemplate
from pixies.utils import *

import sys, os
from optparse import OptionParser

version = version.string

def change_dir( filename ):
	""" Return a string containing the file moved in current directory """
	n = os.path.basename( filename )
	name = os.path.join( os.path.curdir, n )
	return name
	
def change_type( filename ):
	""" Return a filename with the new extension """
	return ' '.join( filename.split('.')[:-1] ) + '.pdf'
		
def _is( type, filename ):
	return filename.endswith( '.' + type )

opt = OptionParser(usage="usage: %prog [options] <infile.fo>")

opt.add_option("--fo", dest="foname",
		help="use <file.fo> as data input ", metavar="<file.fo>")

opt.add_option("--xml", dest="xmlname",
		help="use <file.xml> as data input ", metavar="<file.xml>")
		
opt.add_option("--xsl", dest="xslname",
		help="transform xml input using this XSL stylesheet", metavar="<file.xsl>")

opt.add_option("-o", "--pdf", dest="pdfname",
		help="write PDF output to <file.pdf>", metavar="<file.pdf>")

opt.add_option('-v', '--version', action='store_true', dest='version', 
			help="show program's version number and exit")
		
opt.add_option('--verbose', action='store_true', dest='verbose', 
			help="be verbose...")

(options, args) = opt.parse_args()

if options.version:
	print "Pixies Formatting Objects - Pdf generator \nVersion %s" % version
	print "Copyright (C) 2004 Matteo Merli <matteo.merli@gmail.com>"
	sys.exit(0)

for a in args:
	if _is('xml', a): options.xmlname = a
	elif _is('fo', a): options.foname = a
	elif _is('xsl', a): options.xslname = a
	elif _is('pdf', a): options.pdfname = a
		
# Check for ambiguities
if options.xmlname and not options.xslname:
	opt.print_help()
	Error("To perform a XSLT transformation you need to provide an XSL stylesheet.")
if options.xmlname and options.foname:
	opt.print_help()
	Error("As data input you can use an XSL-FO document _OR_ an XML document and a XSL stylesheet.")
if options.foname and options.xslname:
	opt.print_help()
	Error("There is no need for a XSL stylesheet when processing a XSL-FO document.")
if not( options.xmlname or options.foname ):
	opt.print_help()
	Error("No data input provided.")
	
if not options.pdfname:
	# We derive the PDF name from the input filename
	name = options.foname or options.xmlname
	options.pdfname = change_dir( change_type( name ) )
	
"""
print "DEBUG\n\n"
print "XML:", options.xmlname
print "XSL:", options.xslname
print "FO:", options.foname
print "PDF:", options.pdfname
"""
	
# If input data is XML, we have to perform XSLT transformation
if options.xmlname:
	fo = xslt.xslt_convert( options.xmlname, options.xslname )
	dh = parser.go( buffer=fo )
	
else:
	# Parse directly the XSL-FO document file
	dh = parser.go( filename=options.foname )

doc = DocumentTemplate( options.pdfname , dh )
doc.build()


